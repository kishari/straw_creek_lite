package MTPLTariffRules

import hu.dbx.screek.model.facts.*;
import hu.dbx.screek.model.*;
import java.util.Date;
import org.joda.time.DateTime;
import java.util.ArrayList;

function int yearsBetween(Date s, Date e) {
	return Math.abs(new DateTime(s).getYear() - new DateTime(e).getYear());  
}

rule "alaptarifa beallitas"
	agenda-group "calculate"
	when
		$q : Quote()
		$v : Vehicle()
		$b : BaseTariffDef( durationType == $q.durationType &&
							vehicleType == $v.typeCode &&
							$v.typeCode != "AUTOBUSZ" && 
							$v.typeCode != "MOTORKEREKPAR" && 
						    $v.typeCode != "TEHERGEPJARMU" )
		eval ( $b.isValid( $q.getStartDate() ) )
						
	then
		$q.getResult().setBaseTariff( $b.getValue() );
end

rule "alaptarifa beallitas (motorkerekpar)"
	agenda-group "calculate"
	when
		$q : Quote()
		$v : Vehicle( typeCode == "MOTORKEREKPAR")
		$b : MotorBikeBaseTariffDef( durationType == $q.durationType &&
									 cubicCapacityMin <= $v.cubicCapacity &&
									 cubicCapacityMax >= $v.cubicCapacity )
		eval ( $b.isValid( $q.getStartDate() ) )
						
	then
		$q.getResult().setBaseTariff( $b.getValue() );
end

rule "alaptarifa beallitas (autobusz)"
	agenda-group "calculate"
	when
		$q : Quote()
		$v : Vehicle( typeCode == "AUTOBUSZ")
		$b : AutoBusBaseTariffDef( durationType == $q.durationType &&
								   seatingCapacityMin <= $v.seatingCapacity &&
								   seatingCapacityMax >= $v.seatingCapacity )
		eval ( $b.isValid( $q.getStartDate() ) )
						
	then
		$q.getResult().setBaseTariff( $b.getValue() );
end

rule "alaptarifa beallitas (tehergepjarmu)"
	agenda-group "calculate"
	when
		$q : Quote()
		$p : Partner()
		$v : Vehicle( typeCode == "TEHERGEPJARMU" )
		$b : TruckBaseTariffDef( durationType == $q.durationType &&
								 genderCode == $p.genderCode &&
								 carryingCapacityMin <= $v.carryingCapacity &&
								 carryingCapacityMax >= $v.carryingCapacity )
		eval ( ( !"JOGI_SZEMELY".equals( $p.getGenderCode() ) &&
		 	    $b.getPartnerAgeMin() <= yearsBetween( $p.getDateOfBirth(), $q.getStartDate() ) &&
			    $b.getPartnerAgeMax() >= yearsBetween( $p.getDateOfBirth(), $q.getStartDate() ) ) ||
			   ( "JOGI_SZEMELY".equals( $p.getGenderCode() ) ) )
		eval ( $b.isValid( $q.getStartDate() ) )
						
	then
		$q.getResult().setBaseTariff( $b.getValue() );
end

rule "teruleti besorolas-korcsoport modfactor (termeszetes szemely)"
	agenda-group "calculate"
	when
		$q : Quote()
		$p : Partner( genderCode != "JOGI_SZEMELY")
		$a : AreaDef( postCode == $p.postCode )
		$mf: PartnerAgeModFactorDef( tariffCode == $a.tariffCode )
		eval ( $a.isValid( $q.getStartDate() ) &&
		 	   $mf.isValid( $q.getStartDate() ) &&
		 	   $mf.getAgeMin() <= yearsBetween($p.getDateOfBirth(), $q.getStartDate()) &&
		 	   $mf.getAgeMax() >= yearsBetween($p.getDateOfBirth(), $q.getStartDate()) )
				
	then
		insert(new ModFactor("AREA-AGE-MULTIPLIER", $mf.getValue(), $p));
end

rule "teruleti besorolas modfactor (jogi szemely)"
	agenda-group "calculate"
	when
		$q : Quote()
		$p : Partner( genderCode == "JOGI_SZEMELY")
		$a : AreaDef( postCode == $p.postCode )
		$mf: LegalModFactorDef( tariffCode == $a.tariffCode )
		eval ( $a.isValid( $q.getStartDate() ) &&
		 	   $mf.isValid( $q.getStartDate() ) )
				
	then
		insert(new ModFactor("AREA-MULTIPLIER", $mf.getValue(), $p));
end

rule "Egyeni szorzok"
	agenda-group "calculate"
	salience -30
	
    when
        $q : Quote()
        $p : Partner( quote == $q )
        $modfactors : ArrayList()
                   		from collect( ModFactor( partner == $p ) )

    then
    	for (Object mf : $modfactors){
    		$p.addModFactor((ModFactor) mf);
    	}
end


